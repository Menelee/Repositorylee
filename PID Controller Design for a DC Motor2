import numpy as np
import matplotlib.pyplot as plt

def plot_histograms_of_metrics(results, t_eval):
    """
    For each sampling method (MC, LHS, IS) in 'results', compute the
    rise time, settling time, and overshoot for each sample, then
    plot 3 histograms: one per metric.

    Parameters
    ----------
    results : dict
       Dictionary of the form:
         {
           'MC': 2D array (n_samples, len(t_eval)),
           'LHS': ...,
           'IS': ...
         }
       Each 2D array is [sample_index, time_index] -> speed.
    t_eval : 1D array
       The time vector for the step response.

    Note: We assume you have a 'DCMotorSimulator' class in scope,
          which has the 'compute_performance_metrics' method.
    """
    # We'll do a figure for each sampling method,
    # each containing 3 subplots (Rise Time, Settling Time, Overshoot).
    for method_name, step_matrix in results.items():
        # step_matrix has shape (n_samples, len(t_eval))

        # We'll collect each metric in a separate list
        rise_times = []
        settling_times = []
        overshoots = []

        # For each sample (row in step_matrix)
        for omega in step_matrix:
            # Create a dummy simulator just to call compute_performance_metrics
            sim = DCMotorSimulator(1, 1, 1, 1, 1, 1)  # dummy parameters
            metrics = sim.compute_performance_metrics(t_eval, omega)

            # Extract the metrics
            rise_times.append(metrics['Rise Time (s)'])
            settling_times.append(metrics['Settling Time (s)'])
            overshoots.append(metrics['Peak Overshoot (%)'])

        # Convert to np arrays (handling Nones as np.nan if needed)
        rise_times = np.array([rt if rt is not None else np.nan for rt in rise_times])
        settling_times = np.array([st if st is not None else np.nan for st in settling_times])
        overshoots = np.array(overshoots)

        # Plot them
        fig, axes = plt.subplots(1, 3, figsize=(15, 4))
        fig.suptitle(f'{method_name} - Histograms of Key Metrics')

        # 1) Rise Time
        axes[0].hist(rise_times[~np.isnan(rise_times)], bins=30, alpha=0.7, color='C0')
        axes[0].set_title('Rise Time (s)')
        axes[0].set_xlabel('Time (s)')
        axes[0].set_ylabel('Frequency')

        # 2) Settling Time
        axes[1].hist(settling_times[~np.isnan(settling_times)], bins=30, alpha=0.7, color='C1')
        axes[1].set_title('Settling Time (s)')
        axes[1].set_xlabel('Time (s)')
        axes[1].set_ylabel('Frequency')

        # 3) Overshoot
        axes[2].hist(overshoots, bins=30, alpha=0.7, color='C2')
        axes[2].set_title('Overshoot (%)')
        axes[2].set_xlabel('Overshoot (%)')
        axes[2].set_ylabel('Frequency')

        plt.tight_layout()
        plt.show()
